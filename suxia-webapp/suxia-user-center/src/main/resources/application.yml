##===================== 基础配置 ====================##
suxia:
  # 开启snowflake
  snowflake:
    enable: true
  security:
    oauth2:
      enable: true
    # 校验码
    verify-identify: $2a$10$CIcpu6Vz3kkXGVREYMB5/.GZd1se/JGZCo/bs0Jjbcd5gAfLvUxya
    # 客户端身份校验
    client-id: suxia-client
    client-secret: ywzs@1992!
    grant-type: password

  # 开启redis
  redis:
    prefix: ${spring.application.name}
    enable: true
  # rabbitmq
  rabbitmq:
    enable: true

  # swagger配置
  swagger:
    enable: true
    title: 用户中心
    description: 用户中心接口
    name: 苏夏未来-云舞之森
    url: www.ywzs.xyz
    email: cczhaoyc@163.com
    version: 1.0.0
    base-package: com.suxia.ysyc.controller
  ## 开启xxl-job调度任务
  xxl:
    job:
      enable: true
      port: 20200

##===================== 系统配置 ====================##
server:
  port: 52100
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    # 不要设置过大，如果过大，启动项目会报错：打开文件数过多
    io-threads: 8
    # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
    # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
    worker-threads: 64
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true

spring:
  application:
    name: suxia-user-center

  cloud:
    # stream-rabbit配置
    stream:
      binders: # 绑定消息中间件，可以同时绑定多个不同的中间件
        suxia-rabbit: # 中间件配置名称(唯一)
          type: rabbit # 指定具体的中间件，可以是rabbit、kafka、redis等
          environment:
            spring:
              rabbitmq: # rabbitmq配置
                addresses: amqps://qcpnuhrr:RZvXVxtB1I8QYkhe5DtqAz3nefm1KiGJ@porpoise.rmq.cloudamqp.com/qcpnuhrr
      bindings: # 绑定消息通道，可以同时绑定多个不同的消息通道
        output-order: # 消息通道名称，此处是一个生产者
          binder: suxia-rabbit # 指定消息中间件（spring.stream.binders.his-rabbit）
          destination: suxia.exchange.stream # 相当于rabbitmq中交换机名称，交换机模式默认是topic
          content-type: application/json # 消息类型：text/plain(普通文本)，application/json(JSON消息)
          exchange-type: fanout
          producer: # 生产者
            exchange-type: fanout
            partition-count: 10 # 指定参与消息分区的消费端节点数量为10(0-9)个
            partition-key-expression: "0" # 指定消费者的实例索引(consumer.instance-index),此处必须用""括起来,否者启动就会报错
        input-order: # 消息通道名称，此处是一个消费者
          binder: suxia-rabbit # 指定消息中间件（spring.stream.binders.his-rabbit）
          destination: suxia.exchange.stream # 相当于rabbitmq中交换机名称，交换机模式默认是topic，与生产者绑定同一个交换机
          content-type: application/json # 消息类型：text/plain(普通文本)，application/json(JSON消息)
          group: user-center.group # 分组名称，消费者必须指定，可持久化消息并且分组名称相同的消费者，不会重复消费
          consumer: # 消费者
            exchange-type: fanout
            partitioned: true # 开启分区
            instance-index: 0 # 实例索引，相当于rabbitmq中RoutingKey，此时改消费者接收producer.partition-key-expression=0的消息
            auto-bind-dlq: true
            republish-to-dlq: true
#            acknowledge-mode: manual
            dead-letter-queue-name: dead-letter-queue-name
            dead-letter-exchange: dead-letter-exchange
            max-attempts: 2

    # nacos配置
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        group: DEFAULT_GROUP
        namespace: 1f6c92ad-49cd-45b8-88ad-90f996a69bc2

  # 统一时间格式
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss

  # 数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:5252/suxia?autoReconnect=true&useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: ywzs@1992!
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: SuxiaHikariPool
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 1000
      idle-timeout: 1000
      max-lifetime: 10000
      connection-test-query: SELECT 1

  # redis配置
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password: ywzs@1992!
    timeout: 30s
    lettuce:
      pool:
        max-idle: 30
        min-idle: 10
        max-active: 30
        max-wait: -1ms

  # ES搜索引擎
  elasticsearch:
    rest:
      uris: ["http://127.0.0.1:9200"]

  # rabbitmq配置
#  rabbitmq:
#    virtual-host: qcpnuhrr
#    connection-timeout: 0
#    addresses: amqps://qcpnuhrr:RZvXVxtB1I8QYkhe5DtqAz3nefm1KiGJ@porpoise.rmq.cloudamqp.com/qcpnuhrr

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:/mapper/*Mapper.xml

#  Endpoint 信息查看
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'